/******************************************************************************
 * FILENAME:      test_einsum.cu
 *
 * AUTHORS:       Yutong Huang
 *
 * LAST MODIFIED: Tue 25 May 2021 05:20:41 PM CST
 *
 * CONTACT:       yutong.huang@smartmore.com
 ******************************************************************************/

#define CATCH_CONFIG_MAIN

#include <macro.h>

#include <catch2/catch.hpp>

#include "cudaop/cudaop.h"

namespace {
constexpr float epsilon = 0.001f;
}

TEST_CASE("bnhw,bnchw->bchw", "einsum") {
    auto bnhw_data = std::vector<float>{
        0.98952687, 0.04176088, 0.3844953,  0.5966755,  0.6466146,  0.40169004, 0.67907494, 0.20229353, 0.61596525,
        0.22915623, 0.86638665, 0.75710434, 0.7243245,  0.32166293, 0.774219,   0.08894608, 0.2995787,  0.94479555,
        0.28149107, 0.15999952, 0.8603404,  0.94172996, 0.30328578, 0.7044428,  0.21471687, 0.1937418,  0.19771501,
        0.15756913, 0.41445565, 0.7875617,  0.03444672, 0.36793378, 0.4880629,  0.5425712,  0.08735592, 0.07209481,
        0.8772495,  0.54418015, 0.17287406, 0.2580385,  0.98952687, 0.04176088, 0.3844953,  0.5966755,  0.6466146,
        0.40169004, 0.67907494, 0.20229353, 0.61596525, 0.22915623, 0.86638665, 0.75710434, 0.7243245,  0.32166293,
        0.774219,   0.08894608, 0.2995787,  0.94479555, 0.28149107, 0.15999952, 0.8603404,  0.94172996, 0.30328578,
        0.7044428,  0.21471687, 0.1937418,  0.19771501, 0.15756913, 0.41445565, 0.7875617,  0.03444672, 0.36793378,
        0.4880629,  0.5425712,  0.08735592, 0.07209481, 0.8772495,  0.54418015, 0.17287406, 0.2580385};

    auto bnchw_data = std::vector<float>{
        0.04820577, 0.82978696, 0.72180736, 0.6911125,  0.11814678, 0.01312762, 0.39848906, 0.86195713, 0.00259904,
        0.26014462, 0.49165586, 0.07201776, 0.24074587, 0.56283444, 0.02860511, 0.8491378,  0.4759101,  0.85784125,
        0.7365546,  0.8434943,  0.8852057,  0.36914098, 0.8211008,  0.23839638, 0.759618,   0.42733106, 0.49844787,
        0.15379295, 0.89953774, 0.7949956,  0.37237963, 0.8193815,  0.7005051,  0.98153377, 0.27582574, 0.69045866,
        0.47930536, 0.20860094, 0.08432359, 0.58424246, 0.5635306,  0.49006575, 0.07225095, 0.26734546, 0.6466548,
        0.50442284, 0.05602058, 0.8262543,  0.5982453,  0.36856824, 0.66195023, 0.4691895,  0.4828491,  0.5522322,
        0.45805427, 0.5461386,  0.68157166, 0.6302215,  0.74814206, 0.01727323, 0.82130766, 0.5274686,  0.057183,
        0.79636645, 0.16983485, 0.6055268,  0.34731758, 0.9611698,  0.14894867, 0.7943162,  0.647746,   0.9030135,
        0.6342851,  0.5670319,  0.5948853,  0.6032726,  0.73637587, 0.77164334, 0.19135143, 0.6663067,  0.57566446,
        0.12159332, 0.7112747,  0.8085284,  0.89395845, 0.50627136, 0.63244,    0.5375169,  0.15575734, 0.026172,
        0.13990885, 0.16550994, 0.95312476, 0.8317196,  0.6336803,  0.84348726, 0.31107208, 0.65081906, 0.54749215,
        0.82738906, 0.146291,   0.1683158,  0.6674614,  0.55747604, 0.37911257, 0.42509592, 0.6083007,  0.52029556,
        0.6542922,  0.4218075,  0.1665606,  0.3125575,  0.48092726, 0.20193796, 0.38793778, 0.84551543, 0.95340884,
        0.91425925, 0.12150807, 0.41898167, 0.04820577, 0.82978696, 0.72180736, 0.6911125,  0.11814678, 0.01312762,
        0.39848906, 0.86195713, 0.00259904, 0.26014462, 0.49165586, 0.07201776, 0.24074587, 0.56283444, 0.02860511,
        0.8491378,  0.4759101,  0.85784125, 0.7365546,  0.8434943,  0.8852057,  0.36914098, 0.8211008,  0.23839638,
        0.759618,   0.42733106, 0.49844787, 0.15379295, 0.89953774, 0.7949956,  0.37237963, 0.8193815,  0.7005051,
        0.98153377, 0.27582574, 0.69045866, 0.47930536, 0.20860094, 0.08432359, 0.58424246, 0.5635306,  0.49006575,
        0.07225095, 0.26734546, 0.6466548,  0.50442284, 0.05602058, 0.8262543,  0.5982453,  0.36856824, 0.66195023,
        0.4691895,  0.4828491,  0.5522322,  0.45805427, 0.5461386,  0.68157166, 0.6302215,  0.74814206, 0.01727323,
        0.82130766, 0.5274686,  0.057183,   0.79636645, 0.16983485, 0.6055268,  0.34731758, 0.9611698,  0.14894867,
        0.7943162,  0.647746,   0.9030135,  0.6342851,  0.5670319,  0.5948853,  0.6032726,  0.73637587, 0.77164334,
        0.19135143, 0.6663067,  0.57566446, 0.12159332, 0.7112747,  0.8085284,  0.89395845, 0.50627136, 0.63244,
        0.5375169,  0.15575734, 0.026172,   0.13990885, 0.16550994, 0.95312476, 0.8317196,  0.6336803,  0.84348726,
        0.31107208, 0.65081906, 0.54749215, 0.82738906, 0.146291,   0.1683158,  0.6674614,  0.55747604, 0.37911257,
        0.42509592, 0.6083007,  0.52029556, 0.6542922,  0.4218075,  0.1665606,  0.3125575,  0.48092726, 0.20193796,
        0.38793778, 0.84551543, 0.95340884, 0.91425925, 0.12150807, 0.41898167};

    auto expected = std::vector<float>{
        0.75430506, 0.53138566, 0.2948743,  0.97336453, 0.11286184, 0.12258908, 0.3392738,  0.32581902, 0.06333353,
        0.68518674, 0.4482768,  0.38677415, 0.48394918, 0.48869818, 0.07411337, 0.11902031, 0.7885579,  1.2303976,
        0.24041325, 0.30689144, 1.3712022,  0.12992372, 0.5314289,  0.7118073,  0.68312806, 0.26974055, 0.4635263,
        0.11580738, 0.6186385,  0.20279026, 0.32744414, 0.68125397, 0.9725778,  0.76699007, 0.26890525, 0.12222465,
        0.4164775,  0.5512481,  0.11838353, 0.30697674, 0.6834887,  0.17897362, 0.23021169, 0.55222845, 0.49953827,
        0.28498048, 0.15831235, 0.24912843, 0.6396735,  0.41665912, 0.57924235, 0.47022587, 0.58446217, 0.28719836,
        0.38852298, 0.10953416, 1.0405617,  1.0929521,  0.23160091, 0.11087711, 0.75430506, 0.53138566, 0.2948743,
        0.97336453, 0.11286184, 0.12258908, 0.3392738,  0.32581902, 0.06333353, 0.68518674, 0.4482768,  0.38677415,
        0.48394918, 0.48869818, 0.07411337, 0.11902031, 0.7885579,  1.2303976,  0.24041325, 0.30689144, 1.3712022,
        0.12992372, 0.5314289,  0.7118073,  0.68312806, 0.26974055, 0.4635263,  0.11580738, 0.6186385,  0.20279026,
        0.32744414, 0.68125397, 0.9725778,  0.76699007, 0.26890525, 0.12222465, 0.4164775,  0.5512481,  0.11838353,
        0.30697674, 0.6834887,  0.17897362, 0.23021169, 0.55222845, 0.49953827, 0.28498048, 0.15831235, 0.24912843,
        0.6396735,  0.41665912, 0.57924235, 0.47022587, 0.58446217, 0.28719836, 0.38852298, 0.10953416, 1.0405617,
        1.0929521,  0.23160091, 0.11087711};

    void *bnhw_device = nullptr;
    void *bnchw_device = nullptr;
    void *out_device = nullptr;

    CUDA_CHECK(cudaMalloc(&bnhw_device, sizeof(float) * bnhw_data.size()));
    CUDA_CHECK(cudaMalloc(&bnchw_device, sizeof(float) * bnchw_data.size()));
    CUDA_CHECK(cudaMalloc(&out_device, sizeof(float) * expected.size()));

    CUDA_CHECK(cudaMemcpy(bnhw_device, bnhw_data.data(), sizeof(float) * bnhw_data.size(), cudaMemcpyHostToDevice));
    CUDA_CHECK(cudaMemcpy(bnchw_device, bnchw_data.data(), sizeof(float) * bnchw_data.size(), cudaMemcpyHostToDevice));

    smartmore::cudaop::Einsum<smartmore::cudaop::EinsumType::kBNHW_BNCHW_To_BCHW>(
        (float *)bnhw_device, (float *)bnchw_device, (float *)out_device, {2, 2, 3, 4, 5});

    std::vector<float> got(expected.size());
    CUDA_CHECK(cudaMemcpy(got.data(), out_device, sizeof(float) * got.size(), cudaMemcpyDeviceToHost));

    float diff_sum = 0.0, max_diff = 0.0;
    for (int i = 0; i < expected.size(); i++) {
        float diff = std::abs(got[i] - expected[i]);
        diff_sum += diff;
        max_diff = diff > max_diff ? diff : max_diff;
    }

    REQUIRE(max_diff <= epsilon);
}

TEST_CASE("bchw,bchw->bhw", "einsum") {
    auto bchw0_data = std::vector<float>{
        0.7720386,  0.2621952,  0.9790373,  0.04775693, 0.3039677, 0.84724796, 0.05163439, 0.75772196,
        0.93399405, 0.78663844, 0.4604165,  0.6283804,  0.7648064, 0.1297822,  0.95312023, 0.34413552,
        0.60534424, 0.51087815, 0.35468173, 0.374331,   0.4429034, 0.09561125, 0.11056575, 0.1494092,
        0.7720386,  0.2621952,  0.9790373,  0.04775693, 0.3039677, 0.84724796, 0.05163439, 0.75772196,
        0.93399405, 0.78663844, 0.4604165,  0.6283804,  0.7648064, 0.1297822,  0.95312023, 0.34413552,
        0.60534424, 0.51087815, 0.35468173, 0.374331,   0.4429034, 0.09561125, 0.11056575, 0.1494092};
    auto bchw1_data = std::vector<float>{
        0.52389467, 0.71089935, 0.975122,   0.9387723,  0.17344964, 0.12879254, 0.37104362, 0.78295726,
        0.88940346, 0.5297998,  0.88897085, 0.62121063, 0.44728228, 0.2524461,  0.22395177, 0.00496765,
        0.8894811,  0.4043403,  0.740176,   0.5375936,  0.13456029, 0.38475674, 0.14029208, 0.944007,
        0.52389467, 0.71089935, 0.975122,   0.9387723,  0.17344964, 0.12879254, 0.37104362, 0.78295726,
        0.88940346, 0.5297998,  0.88897085, 0.62121063, 0.44728228, 0.2524461,  0.22395177, 0.00496765,
        0.8894811,  0.4043403,  0.740176,   0.5375936,  0.13456029, 0.38475674, 0.14029208, 0.944007};
    auto expected = std::vector<float>{0.7465513, 0.2191574, 1.1681337,  0.04654243, 0.59116536, 0.31568784,
                                       0.2816855, 0.7945019, 0.89029473, 0.45354795, 0.42480835, 0.53139997,
                                       0.7465513, 0.2191574, 1.1681337,  0.04654243, 0.59116536, 0.31568784,
                                       0.2816855, 0.7945019, 0.89029473, 0.45354795, 0.42480835, 0.53139997};

    void *bchw_0 = nullptr;
    void *bchw_1 = nullptr;
    void *out = nullptr;

    CUDA_CHECK(cudaMalloc(&bchw_0, sizeof(float) * bchw0_data.size()));
    CUDA_CHECK(cudaMalloc(&bchw_1, sizeof(float) * bchw1_data.size()));
    CUDA_CHECK(cudaMalloc(&out, sizeof(float) * expected.size()));

    CUDA_CHECK(cudaMemcpy(bchw_0, bchw0_data.data(), bchw0_data.size() * sizeof(float), cudaMemcpyHostToDevice));
    CUDA_CHECK(cudaMemcpy(bchw_1, bchw1_data.data(), bchw1_data.size() * sizeof(float), cudaMemcpyHostToDevice));

    smartmore::cudaop::Einsum<smartmore::cudaop::EinsumType::kBCHW_BCHW_To_BHW>((float *)bchw_0, (float *)bchw_1,
                                                                                (float *)out, {2, 2, 3, 4});

    std::vector<float> got(expected.size());
    CUDA_CHECK(cudaMemcpy(got.data(), out, sizeof(float) * got.size(), cudaMemcpyDeviceToHost));

    float diff_sum = 0.0, max_diff = 0.0;
    for (int i = 0; i < expected.size(); i++) {
        float diff = std::abs(got[i] - expected[i]);
        diff_sum += diff;
        max_diff = diff > max_diff ? diff : max_diff;
    }

    REQUIRE(max_diff <= epsilon);
}
